@page "/coaches"
@inject CoachService CoachService
@inject AuthService AuthService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@implements IDisposable
@rendermode InteractiveServer

<PageTitle>Coach Management</PageTitle>

@if (!isInitialized)
{
    <div class="text-center py-5">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p class="mt-3">Checking authentication...</p>
    </div>
    return;
}

@if (!AuthService.IsAuthenticated)
{
    <div class="alert alert-warning">
        <h5>Authentication Required</h5>
        <p>Please <a href="/login">login</a> to access this page.</p>
    </div>
    return;
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2>Coach Management</h2>
                <button class="btn btn-primary" @onclick="OpenCreateModal">
                    <i class="fas fa-plus"></i> New Coach
                </button>
            </div>

            <!-- Search Filters -->
            <div class="card mb-4">
                <div class="card-header">
                    <h5>Search & Filter</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-4">
                            <label class="form-label">Full Name</label>
                            <input type="text" class="form-control" @bind="searchModel.FullName" placeholder="Search by name..." />
                        </div>
                        <div class="col-md-4">
                            <label class="form-label">Email</label>
                            <input type="text" class="form-control" @bind="searchModel.Email" placeholder="Search by email..." />
                        </div>
                        <div class="col-md-4 d-flex align-items-end">
                            <button class="btn btn-outline-primary me-2" @onclick="SearchCoaches">
                                <i class="fas fa-search"></i> Search
                            </button>
                            <button class="btn btn-outline-secondary" @onclick="ClearSearch">
                                <i class="fas fa-times"></i> Clear
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Coach List -->
            @if (isLoading)
            {
                <div class="text-center py-5">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
            else
            {
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5>Coaches (@coachResult.TotalItems total)</h5>
                        <div>
                            Showing @coachResult.StartIndex - @coachResult.EndIndex of @coachResult.TotalItems
                        </div>
                    </div>
                    <div class="card-body p-0">
                        @if (coachResult.Items.Any())
                        {
                            <div class="table-responsive">
                                <table class="table table-hover mb-0">
                                    <thead class="table-light">
                                        <tr>
                                            <th>ID</th>
                                            <th>Full Name</th>
                                            <th>Email</th>
                                            <th>Phone</th>
                                            <th>Bio</th>
                                            <th>Created</th>
                                            <th>Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var coach in coachResult.Items)
                                        {
                                            <tr>
                                                <td>@coach.CoachesLocDpxid</td>
                                                <td>
                                                    <div class="fw-bold">@coach.FullName</div>
                                                </td>
                                                <td>
                                                    <a href="mailto:@coach.Email" class="text-decoration-none">
                                                        @coach.Email
                                                    </a>
                                                </td>
                                                <td>
                                                    @if (!string.IsNullOrEmpty(coach.PhoneNumber))
                                                    {
                                                        <a href="tel:@coach.PhoneNumber" class="text-decoration-none">
                                                            @coach.PhoneNumber
                                                        </a>
                                                    }
                                                    else
                                                    {
                                                        <span class="text-muted">-</span>
                                                    }
                                                </td>
                                                <td>
                                                    @if (!string.IsNullOrEmpty(coach.Bio))
                                                    {
                                                        <div class="text-truncate" style="max-width: 200px;" title="@coach.Bio">
                                                            @coach.Bio
                                                        </div>
                                                    }
                                                    else
                                                    {
                                                        <span class="text-muted">-</span>
                                                    }
                                                </td>
                                                <td>@coach.CreatedAt?.ToString("MM/dd/yyyy")</td>
                                                <td>
                                                    <div class="btn-group btn-group-sm">
                                                        <button class="btn btn-outline-primary" @onclick="() => OpenEditModal(coach)" title="Edit">
                                                            <i class="fas fa-edit"></i>
                                                        </button>
                                                        <button class="btn btn-outline-danger" @onclick="() => DeleteCoach(coach.CoachesLocDpxid)" title="Delete">
                                                            <i class="fas fa-trash"></i>
                                                        </button>
                                                    </div>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                        else
                        {
                            <div class="text-center py-5">
                                <i class="fas fa-user-tie fa-3x text-muted"></i>
                                <p class="mt-3 text-muted">No coaches found</p>
                            </div>
                        }
                    </div>

                    <!-- Pagination -->
                    @if (coachResult.TotalPages > 1)
                    {
                        <div class="card-footer">
                            <nav>
                                <ul class="pagination justify-content-center mb-0">
                                    <li class="page-item @(coachResult.HasPreviousPage ? "" : "disabled")">
                                        <button class="page-link" @onclick="() => ChangePage(coachResult.CurrentPage - 1)" disabled="@(!coachResult.HasPreviousPage)">
                                            Previous
                                        </button>
                                    </li>

                                    @for (int i = Math.Max(1, coachResult.CurrentPage - 2); i <= Math.Min(coachResult.TotalPages, coachResult.CurrentPage + 2); i++)
                                    {
                                        <li class="page-item @(i == coachResult.CurrentPage ? "active" : "")">
                                            <button class="page-link" @onclick="() => ChangePage(i)">@i</button>
                                        </li>
                                    }

                                    <li class="page-item @(coachResult.HasNextPage ? "" : "disabled")">
                                        <button class="page-link" @onclick="() => ChangePage(coachResult.CurrentPage + 1)" disabled="@(!coachResult.HasNextPage)">
                                            Next
                                        </button>
                                    </li>
                                </ul>
                            </nav>
                        </div>
                    }
                </div>
            }
        </div>
    </div>
</div>

<!-- COMPLETE CREATE/EDIT MODAL -->
@if (showModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(isEditing ? "Edit Coach" : "Create New Coach")</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <EditForm Model="coachModel" OnValidSubmit="SaveCoach">
                    <DataAnnotationsValidator />
                    <div class="modal-body">
                        @if (!string.IsNullOrEmpty(modalError))
                        {
                            <div class="alert alert-danger">@modalError</div>
                        }

                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Full Name <span class="text-danger">*</span></label>
                                    <InputText class="form-control" @bind-Value="coachModel.FullName" placeholder="Enter full name" />
                                    <ValidationMessage For="() => coachModel.FullName" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Email <span class="text-danger">*</span></label>
                                    <InputText type="email" class="form-control" @bind-Value="coachModel.Email" placeholder="Enter email address" />
                                    <ValidationMessage For="() => coachModel.Email" />
                                </div>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Phone Number</label>
                            <InputText class="form-control" @bind-Value="coachModel.PhoneNumber" placeholder="Enter phone number" />
                            <ValidationMessage For="() => coachModel.PhoneNumber" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Bio</label>
                            <InputTextArea class="form-control" rows="4" @bind-Value="coachModel.Bio" placeholder="Enter coach biography and expertise..." />
                            <ValidationMessage For="() => coachModel.Bio" />
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
                        <button type="submit" class="btn btn-primary" disabled="@isSaving">
                            @if (isSaving)
                            {
                                <span class="spinner-border spinner-border-sm me-2"></span>
                            }
                            @(isEditing ? "Update" : "Create")
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private PaginationResult<CoachesLocDpx> coachResult = new();
    private SearchModel searchModel = new();
    private CoachFormModel coachModel = new();
    private bool isLoading = true;
    private bool isInitialized = false;
    private bool showModal = false;
    private bool isEditing = false;
    private bool isSaving = false;
    private string modalError = string.Empty;
    private int currentPage = 1;
    private int pageSize = 10;

    protected override void OnInitialized()
    {
        Console.WriteLine("Coaches page: OnInitialized called");
        AuthService.AuthStateChanged += OnAuthStateChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                Console.WriteLine("Coaches page: First render - checking authentication");

                var isAuthenticated = await AuthService.CheckAuthenticationAsync();

                if (!isAuthenticated)
                {
                    Console.WriteLine("Coaches page: User not authenticated, redirecting to login");
                    Navigation.NavigateTo("/login", forceLoad: true);
                    return;
                }

                Console.WriteLine("Coaches page: User authenticated, loading data");
                isInitialized = true;
                StateHasChanged();

                await LoadCoaches();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Coaches page: Error during initialization: {ex.Message}");
                isInitialized = true;
                StateHasChanged();
            }
        }
    }

    private void OnAuthStateChanged(bool isAuthenticated)
    {
        Console.WriteLine($"Coaches page: Auth state changed to: {isAuthenticated}");
        if (!isAuthenticated)
        {
            Navigation.NavigateTo("/login", forceLoad: true);
        }
        InvokeAsync(StateHasChanged);
    }

    private async Task LoadCoaches()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            if (IsSearchActive())
            {
                coachResult = await CoachService.SearchCoachesAsync(
                    searchModel.FullName,
                    searchModel.Email,
                    currentPage,
                    pageSize);
            }
            else
            {
                coachResult = await CoachService.GetCoachesWithPagingAsync(currentPage, pageSize);
            }

            Console.WriteLine($"Coaches page: Loaded {coachResult.Items.Count} coaches");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Coaches page: Error loading coaches: {ex.Message}");
            modalError = $"Error loading coaches: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task SearchCoaches()
    {
        currentPage = 1;
        await LoadCoaches();
    }

    private async Task ClearSearch()
    {
        searchModel = new SearchModel();
        currentPage = 1;
        await LoadCoaches();
    }

    private bool IsSearchActive()
    {
        return !string.IsNullOrEmpty(searchModel.FullName) ||
               !string.IsNullOrEmpty(searchModel.Email);
    }

    private async Task ChangePage(int page)
    {
        currentPage = page;
        await LoadCoaches();
    }

    // IMPLEMENTED: Create modal
    private void OpenCreateModal()
    {
        coachModel = new CoachFormModel();
        isEditing = false;
        modalError = string.Empty;
        showModal = true;
    }

    // IMPLEMENTED: Edit modal
    private void OpenEditModal(CoachesLocDpx coach)
    {
        coachModel = new CoachFormModel
        {
            CoachesLocDpxid = coach.CoachesLocDpxid,
            FullName = coach.FullName,
            Email = coach.Email,
            PhoneNumber = coach.PhoneNumber,
            Bio = coach.Bio
        };
        isEditing = true;
        modalError = string.Empty;
        showModal = true;
    }

    private void CloseModal()
    {
        showModal = false;
        coachModel = new();
        modalError = string.Empty;
    }

    // IMPLEMENTED: Save coach (create/update)
    private async Task SaveCoach()
    {
        try
        {
            isSaving = true;
            modalError = string.Empty;

            if (isEditing)
            {
                var updateInput = new CoachesLocDpxUpdateInput
                {
                    CoachesLocDpxid = coachModel.CoachesLocDpxid,
                    FullName = coachModel.FullName,
                    Email = coachModel.Email,
                    PhoneNumber = coachModel.PhoneNumber,
                    Bio = coachModel.Bio
                };

                await CoachService.UpdateCoachAsync(updateInput);
            }
            else
            {
                var createInput = new CoachesLocDpxInput
                {
                    FullName = coachModel.FullName,
                    Email = coachModel.Email,
                    PhoneNumber = coachModel.PhoneNumber,
                    Bio = coachModel.Bio
                };

                await CoachService.CreateCoachAsync(createInput);
            }

            CloseModal();
            await LoadCoaches();
        }
        catch (Exception ex)
        {
            modalError = $"Error saving coach: {ex.Message}";
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }

    // IMPLEMENTED: Delete coach
    private async Task DeleteCoach(int id)
    {
        try
        {
            var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this coach?");
            if (confirmed)
            {
                await CoachService.DeleteCoachAsync(id);
                await LoadCoaches();
            }
        }
        catch (Exception ex)
        {
            modalError = $"Error deleting coach: {ex.Message}";
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        AuthService.AuthStateChanged -= OnAuthStateChanged;
    }

    public class SearchModel
    {
        public string? FullName { get; set; }
        public string? Email { get; set; }
    }

    public class CoachFormModel
    {
        public int CoachesLocDpxid { get; set; }

        [Required(ErrorMessage = "Full name is required")]
        [StringLength(100, ErrorMessage = "Full name cannot exceed 100 characters")]
        public string FullName { get; set; } = string.Empty;

        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Please enter a valid email address")]
        [StringLength(100, ErrorMessage = "Email cannot exceed 100 characters")]
        public string Email { get; set; } = string.Empty;

        [Phone(ErrorMessage = "Please enter a valid phone number")]
        [StringLength(20, ErrorMessage = "Phone number cannot exceed 20 characters")]
        public string? PhoneNumber { get; set; }

        [StringLength(500, ErrorMessage = "Bio cannot exceed 500 characters")]
        public string? Bio { get; set; }
    }
}