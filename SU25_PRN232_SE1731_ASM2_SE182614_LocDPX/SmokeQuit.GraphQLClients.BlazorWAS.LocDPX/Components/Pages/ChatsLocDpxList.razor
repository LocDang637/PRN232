@page "/chats"
@inject ChatService ChatService
@inject CoachService CoachService
@inject AuthService AuthService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@implements IDisposable
@rendermode InteractiveServer

<PageTitle>Chat Management</PageTitle>

@if (!isInitialized)
{
    <div class="text-center py-5">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p class="mt-3">Checking authentication...</p>
    </div>
    return;
}

@if (!AuthService.IsAuthenticated)
{
    <div class="alert alert-warning">
        <h5>Authentication Required</h5>
        <p>Please <a href="/login">login</a> to access this page.</p>
    </div>
    return;
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2>Chat Management</h2>
                <div>
                    <span class="text-muted me-3">Welcome, @AuthService.CurrentUser?.FullName</span>
                    <button class="btn btn-primary" @onclick="OpenCreateModal">
                        <i class="fas fa-plus"></i> New Chat
                    </button>
                </div>
            </div>

            <!-- Search Filters -->
            <div class="card mb-4">
                <div class="card-header">
                    <h5>Search & Filter</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-3">
                            <label class="form-label">Message Content</label>
                            <input type="text" class="form-control" @bind="searchModel.MessageContent" placeholder="Search message..." />
                        </div>
                        <div class="col-md-2">
                            <label class="form-label">Message Type</label>
                            <select class="form-select" @bind="searchModel.MessageType">
                                <option value="">All Types</option>
                                <option value="Text">Text</option>
                                <option value="Image">Image</option>
                                <option value="File">File</option>
                            </select>
                        </div>
                        <div class="col-md-2">
                            <label class="form-label">Sent By</label>
                            <select class="form-select" @bind="searchModel.SentBy">
                                <option value="">All</option>
                                <option value="User">User</option>
                                <option value="Coach">Coach</option>
                            </select>
                        </div>
                        <div class="col-md-2">
                            <label class="form-label">Read Status</label>
                            <select class="form-select" @bind="searchModel.IsReadString">
                                <option value="">All</option>
                                <option value="true">Read</option>
                                <option value="false">Unread</option>
                            </select>
                        </div>
                        <div class="col-md-3 d-flex align-items-end">
                            <button class="btn btn-outline-primary me-2" @onclick="SearchChats">
                                <i class="fas fa-search"></i> Search
                            </button>
                            <button class="btn btn-outline-secondary" @onclick="ClearSearch">
                                <i class="fas fa-times"></i> Clear
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Chat List -->
            @if (isLoading)
            {
                <div class="text-center py-5">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading chats...</span>
                    </div>
                </div>
            }
            else
            {
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5>Chat History (@chatResult.TotalItems total)</h5>
                        <div>
                            Showing @chatResult.StartIndex - @chatResult.EndIndex of @chatResult.TotalItems
                        </div>
                    </div>
                    <div class="card-body p-0">
                        @if (chatResult.Items.Any())
                        {
                            <div class="table-responsive">
                                <table class="table table-hover mb-0">
                                    <thead class="table-light">
                                        <tr>
                                            <th>ID</th>
                                            <th>Message</th>
                                            <th>Type</th>
                                            <th>Sent By</th>
                                            <th>Coach</th>
                                            <th>Status</th>
                                            <th>Created</th>
                                            <th>Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var chat in chatResult.Items)
                                        {
                                            <tr>
                                                <td>@chat.ChatsLocDpxid</td>
                                                <td>
                                                    <div class="text-truncate" style="max-width: 200px;" title="@chat.Message">
                                                        @chat.Message
                                                    </div>
                                                </td>
                                                <td>
                                                    <span class="badge bg-info">@chat.MessageType</span>
                                                </td>
                                                <td>
                                                    <span class="badge @(chat.SentBy == "User" ? "bg-primary" : "bg-success")">
                                                        @chat.SentBy
                                                    </span>
                                                </td>
                                                <td>@chat.Coach?.FullName</td>
                                                <td>
                                                    <span class="badge @(chat.IsRead ? "bg-success" : "bg-warning")">
                                                        @(chat.IsRead ? "Read" : "Unread")
                                                    </span>
                                                </td>
                                                <td>@chat.CreatedAt?.ToString("MM/dd/yyyy HH:mm")</td>
                                                <td>
                                                    <div class="btn-group btn-group-sm">
                                                        <button class="btn btn-outline-primary" @onclick="() => OpenEditModal(chat)">
                                                            <i class="fas fa-edit"></i>
                                                        </button>
                                                        <button class="btn btn-outline-danger" @onclick="() => DeleteChat(chat.ChatsLocDpxid)">
                                                            <i class="fas fa-trash"></i>
                                                        </button>
                                                    </div>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                        else
                        {
                            <div class="text-center py-5">
                                <i class="fas fa-comments fa-3x text-muted"></i>
                                <p class="mt-3 text-muted">No chats found</p>
                            </div>
                        }
                    </div>

                    <!-- Simple Pagination -->
                    @if (chatResult.TotalPages > 1)
                    {
                        <div class="card-footer">
                            <nav>
                                <ul class="pagination justify-content-center mb-0">
                                    <li class="page-item @(chatResult.HasPreviousPage ? "" : "disabled")">
                                        <button class="page-link" @onclick="() => ChangePage(chatResult.CurrentPage - 1)" disabled="@(!chatResult.HasPreviousPage)">
                                            Previous
                                        </button>
                                    </li>

                                    @for (int i = Math.Max(1, chatResult.CurrentPage - 2); i <= Math.Min(chatResult.TotalPages, chatResult.CurrentPage + 2); i++)
                                    {
                                        <li class="page-item @(i == chatResult.CurrentPage ? "active" : "")">
                                            <button class="page-link" @onclick="() => ChangePage(i)">@i</button>
                                        </li>
                                    }

                                    <li class="page-item @(chatResult.HasNextPage ? "" : "disabled")">
                                        <button class="page-link" @onclick="() => ChangePage(chatResult.CurrentPage + 1)" disabled="@(!chatResult.HasNextPage)">
                                            Next
                                        </button>
                                    </li>
                                </ul>
                            </nav>
                        </div>
                    }
                </div>
            }
        </div>
    </div>
</div>

<!-- Simple error message for now -->
@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="position-fixed top-0 end-0 p-3" style="z-index: 1050">
        <div class="alert alert-danger">@errorMessage</div>
    </div>
}

@code {
    private PaginationResult<ChatsLocDpx> chatResult = new();
    private List<CoachesLocDpx> coaches = new();
    private SearchModel searchModel = new();
    private bool isLoading = true;
    private bool isInitialized = false;
    private string errorMessage = string.Empty;
    private int currentPage = 1;
    private int pageSize = 10;

    protected override void OnInitialized()
    {
        Console.WriteLine("Chats page: OnInitialized called");
        AuthService.AuthStateChanged += OnAuthStateChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                Console.WriteLine("Chats page: First render - checking authentication");

                // Check authentication with timeout
                var isAuthenticated = await AuthService.CheckAuthenticationAsync();

                if (!isAuthenticated)
                {
                    Console.WriteLine("Chats page: User not authenticated, redirecting to login");
                    Navigation.NavigateTo("/login", forceLoad: true);
                    return;
                }

                Console.WriteLine("Chats page: User authenticated, loading data");
                isInitialized = true;
                StateHasChanged();

                await LoadChats();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Chats page: Error during initialization: {ex.Message}");
                errorMessage = $"Error loading page: {ex.Message}";
                isInitialized = true;
                StateHasChanged();
            }
        }
    }

    private void OnAuthStateChanged(bool isAuthenticated)
    {
        Console.WriteLine($"Chats page: Auth state changed to: {isAuthenticated}");
        if (!isAuthenticated)
        {
            Navigation.NavigateTo("/login", forceLoad: true);
        }
        InvokeAsync(StateHasChanged);
    }

    private async Task LoadChats()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            if (IsSearchActive())
            {
                chatResult = await ChatService.SearchChatsAsync(
                   
                    searchModel.MessageType,
                    searchModel.SentBy,
                    searchModel.IsRead,
                    currentPage,
                    pageSize);
            }
            else
            {
                chatResult = await ChatService.GetChatsWithPagingAsync(currentPage, pageSize);
            }

            Console.WriteLine($"Chats page: Loaded {chatResult.Items.Count} chats");
        }
        catch (UnauthorizedAccessException)
        {
            Console.WriteLine("Chats page: Unauthorized during LoadChats, redirecting to login");
            Navigation.NavigateTo("/login", forceLoad: true);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Chats page: Error loading chats: {ex.Message}");
            errorMessage = $"Error loading chats: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task SearchChats()
    {
        currentPage = 1;
        await LoadChats();
    }

    private async Task ClearSearch()
    {
        searchModel = new SearchModel();
        currentPage = 1;
        await LoadChats();
    }

    private bool IsSearchActive()
    {
        return !string.IsNullOrEmpty(searchModel.MessageContent) ||
               !string.IsNullOrEmpty(searchModel.MessageType) ||
               !string.IsNullOrEmpty(searchModel.SentBy) ||
               searchModel.IsRead.HasValue;
    }

    private async Task ChangePage(int page)
    {
        currentPage = page;
        await LoadChats();
    }

    private void OpenCreateModal()
    {
        // Simplified for now
        errorMessage = "Create modal not implemented yet";
    }

    private void OpenEditModal(ChatsLocDpx chat)
    {
        // Simplified for now
        errorMessage = "Edit modal not implemented yet";
    }

    private async Task DeleteChat(int id)
    {
        // Simplified for now
        errorMessage = "Delete not implemented yet";
    }

    public void Dispose()
    {
        AuthService.AuthStateChanged -= OnAuthStateChanged;
    }

    public class SearchModel
    {
        public string? MessageContent { get; set; }
        public string? MessageType { get; set; }
        public string? SentBy { get; set; }
        public string? IsReadString { get; set; }
        public bool? IsRead => IsReadString switch
        {
            "true" => true,
            "false" => false,
            _ => null
        };
    }
}