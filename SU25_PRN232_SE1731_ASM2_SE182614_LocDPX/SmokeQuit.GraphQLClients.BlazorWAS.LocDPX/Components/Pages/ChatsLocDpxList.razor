@page "/chats"
@inject ChatService ChatService
@inject CoachService CoachService
@inject AuthService AuthService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@implements IDisposable
@rendermode InteractiveServer

<PageTitle>Chat Management</PageTitle>

@if (!isInitialized)
{
    <div class="text-center py-5">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p class="mt-3">Checking authentication...</p>
    </div>
    return;
}

@if (!AuthService.IsAuthenticated)
{
    <div class="alert alert-warning">
        <h5>Authentication Required</h5>
        <p>Please <a href="/login">login</a> to access this page.</p>
        <p><small>Redirecting to login page...</small></p>
    </div>
    return;
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2>Chat Management</h2>
                <div>
                    <span class="text-muted me-3">Welcome, @AuthService.CurrentUser?.FullName</span>
                    <button class="btn btn-primary" @onclick="OpenCreateModal">
                        <i class="fas fa-plus"></i> New Chat
                    </button>
                </div>
            </div>

            <!-- Search Filters -->
            <div class="card mb-4">
                <div class="card-header">
                    <h5>Search & Filter</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-3">
                            <label class="form-label">Message Content</label>
                            <input type="text" class="form-control" @bind="searchModel.MessageContent" placeholder="Search message..." />
                        </div>
                        <div class="col-md-2">
                            <label class="form-label">Message Type</label>
                            <select class="form-select" @bind="searchModel.MessageType">
                                <option value="">All Types</option>
                                <option value="Text">Text</option>
                                <option value="Image">Image</option>
                                <option value="File">File</option>
                            </select>
                        </div>
                        <div class="col-md-2">
                            <label class="form-label">Sent By</label>
                            <select class="form-select" @bind="searchModel.SentBy">
                                <option value="">All</option>
                                <option value="User">User</option>
                                <option value="Coach">Coach</option>
                            </select>
                        </div>
                        <div class="col-md-2">
                            <label class="form-label">Read Status</label>
                            <select class="form-select" @bind="searchModel.IsReadString">
                                <option value="">All</option>
                                <option value="true">Read</option>
                                <option value="false">Unread</option>
                            </select>
                        </div>
                        <div class="col-md-3 d-flex align-items-end">
                            <button class="btn btn-outline-primary me-2" @onclick="SearchChats">
                                <i class="fas fa-search"></i> Search
                            </button>
                            <button class="btn btn-outline-secondary" @onclick="ClearSearch">
                                <i class="fas fa-times"></i> Clear
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Chat List -->
            @if (isLoading)
            {
                <div class="text-center py-5">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading chats...</span>
                    </div>
                </div>
            }
            else
            {
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5>Chat History (@chatResult.TotalItems total)</h5>
                        <div>
                            Showing @chatResult.StartIndex - @chatResult.EndIndex of @chatResult.TotalItems
                        </div>
                    </div>
                    <div class="card-body p-0">
                        @if (chatResult.Items.Any())
                        {
                            <div class="table-responsive">
                                <table class="table table-hover mb-0">
                                    <thead class="table-light">
                                        <tr>
                                            <th>ID</th>
                                            <th>Message</th>
                                            <th>Type</th>
                                            <th>Sent By</th>
                                            <th>Coach</th>
                                            <th>Status</th>
                                            <th>Created</th>
                                            <th>Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var chat in chatResult.Items)
                                        {
                                            <tr>
                                                <td>@chat.ChatsLocDpxid</td>
                                                <td>
                                                    <div class="text-truncate" style="max-width: 200px;" title="@chat.Message">
                                                        @chat.Message
                                                    </div>
                                                </td>
                                                <td>
                                                    <span class="badge bg-info">@chat.MessageType</span>
                                                </td>
                                                <td>
                                                    <span class="badge @(chat.SentBy == "User" ? "bg-primary" : "bg-success")">
                                                        @chat.SentBy
                                                    </span>
                                                </td>
                                                <td>@chat.Coach?.FullName</td>
                                                <td>
                                                    <span class="badge @(chat.IsRead ? "bg-success" : "bg-warning")">
                                                        @(chat.IsRead ? "Read" : "Unread")
                                                    </span>
                                                </td>
                                                <td>@chat.CreatedAt?.ToString("MM/dd/yyyy HH:mm")</td>
                                                <td>
                                                    <div class="btn-group btn-group-sm">
                                                        <button class="btn btn-outline-primary" @onclick="() => OpenEditModal(chat)">
                                                            <i class="fas fa-edit"></i>
                                                        </button>
                                                        <button class="btn btn-outline-danger" @onclick="() => DeleteChat(chat.ChatsLocDpxid)">
                                                            <i class="fas fa-trash"></i>
                                                        </button>
                                                    </div>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                        else
                        {
                            <div class="text-center py-5">
                                <i class="fas fa-comments fa-3x text-muted"></i>
                                <p class="mt-3 text-muted">No chats found</p>
                            </div>
                        }
                    </div>

                    <!-- Pagination -->
                    @if (chatResult.TotalPages > 1)
                    {
                        <div class="card-footer">
                            <nav>
                                <ul class="pagination justify-content-center mb-0">
                                    <li class="page-item @(chatResult.HasPreviousPage ? "" : "disabled")">
                                        <button class="page-link" @onclick="() => ChangePage(chatResult.CurrentPage - 1)" disabled="@(!chatResult.HasPreviousPage)">
                                            Previous
                                        </button>
                                    </li>

                                    @for (int i = Math.Max(1, chatResult.CurrentPage - 2); i <= Math.Min(chatResult.TotalPages, chatResult.CurrentPage + 2); i++)
                                    {
                                        <li class="page-item @(i == chatResult.CurrentPage ? "active" : "")">
                                            <button class="page-link" @onclick="() => ChangePage(i)">@i</button>
                                        </li>
                                    }

                                    <li class="page-item @(chatResult.HasNextPage ? "" : "disabled")">
                                        <button class="page-link" @onclick="() => ChangePage(chatResult.CurrentPage + 1)" disabled="@(!chatResult.HasNextPage)">
                                            Next
                                        </button>
                                    </li>
                                </ul>
                            </nav>
                        </div>
                    }
                </div>
            }
        </div>
    </div>
</div>

<!-- Create/Edit Modal -->
<div class="modal fade @(showModal ? "show" : "")" style="display: @(showModal ? "block" : "none")" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@(isEditing ? "Edit Chat" : "Create New Chat")</h5>
                <button type="button" class="btn-close" @onclick="CloseModal"></button>
            </div>
            <EditForm Model="chatModel" OnValidSubmit="SaveChat">
                <DataAnnotationsValidator />
                <div class="modal-body">
                    @if (!string.IsNullOrEmpty(modalError))
                    {
                        <div class="alert alert-danger">@modalError</div>
                    }

                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">User ID</label>
                                <InputNumber class="form-control" @bind-Value="chatModel.UserId" />
                                <ValidationMessage For="() => chatModel.UserId" />
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Coach</label>
                                <select class="form-select" @bind="chatModel.CoachId">
                                    <option value="0">Select Coach</option>
                                    @foreach (var coach in coaches)
                                    {
                                        <option value="@coach.CoachesLocDpxid">@coach.FullName</option>
                                    }
                                </select>
                                <ValidationMessage For="() => chatModel.CoachId" />
                            </div>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Message</label>
                        <InputTextArea class="form-control" rows="4" @bind-Value="chatModel.Message" />
                        <ValidationMessage For="() => chatModel.Message" />
                    </div>

                    <div class="row">
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label class="form-label">Message Type</label>
                                <select class="form-select" @bind="chatModel.MessageType">
                                    <option value="">Select Type</option>
                                    <option value="Text">Text</option>
                                    <option value="Image">Image</option>
                                    <option value="File">File</option>
                                </select>
                                <ValidationMessage For="() => chatModel.MessageType" />
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label class="form-label">Sent By</label>
                                <select class="form-select" @bind="chatModel.SentBy">
                                    <option value="">Select Sender</option>
                                    <option value="User">User</option>
                                    <option value="Coach">Coach</option>
                                </select>
                                <ValidationMessage For="() => chatModel.SentBy" />
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label class="form-label">Status</label>
                                <div class="form-check mt-2">
                                    <InputCheckbox class="form-check-input" @bind-Value="chatModel.IsRead" />
                                    <label class="form-check-label">Mark as Read</label>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Attachment URL (Optional)</label>
                        <InputText class="form-control" @bind-Value="chatModel.AttachmentUrl" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
                    <button type="submit" class="btn btn-primary" disabled="@isSaving">
                        @if (isSaving)
                        {
                            <span class="spinner-border spinner-border-sm me-2"></span>
                        }
                        @(isEditing ? "Update" : "Create")
                    </button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@if (showModal)
{
    <div class="modal-backdrop fade show"></div>
}

@code {
    private PaginationResult<ChatsLocDpx> chatResult = new();
    private List<CoachesLocDpx> coaches = new();
    private SearchModel searchModel = new();
    private ChatFormModel chatModel = new();
    private bool isLoading = true;
    private bool isInitialized = false;
    private bool showModal = false;
    private bool isEditing = false;
    private bool isSaving = false;
    private string modalError = string.Empty;
    private int currentPage = 1;
    private int pageSize = 10;

    protected override void OnInitialized()
    {
        Console.WriteLine("Chats page: OnInitialized called");

        // Just check authentication state without using JS
        Console.WriteLine($"Chats page: Auth state - IsAuthenticated: {AuthService.IsAuthenticated}");
        Console.WriteLine($"Chats page: Current user: {AuthService.CurrentUser?.UserName ?? "None"}");

        // Subscribe to auth state changes
        AuthService.AuthStateChanged += OnAuthStateChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                Console.WriteLine("Chats page: First render - checking authentication");

                // Wait a moment for auth to initialize
                await Task.Delay(500);

                if (!AuthService.IsAuthenticated)
                {
                    Console.WriteLine("Chats page: User not authenticated, redirecting to login");
                    Navigation.NavigateTo("/login", forceLoad: true);
                    return;
                }

                Console.WriteLine("Chats page: User authenticated, loading data");
                isInitialized = true;
                StateHasChanged();

                await LoadCoaches();
                await LoadChats();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Chats page: Error during initialization: {ex.Message}");
                // Show error but still mark as initialized
                isInitialized = true;
                StateHasChanged();

                // Show error without using JS during prerender
                if (firstRender)
                {
                    await Task.Delay(100); // Wait for render to complete
                }
                await JSRuntime.InvokeVoidAsync("alert", $"Error loading page: {ex.Message}");
            }
        }
    }

    private void OnAuthStateChanged(bool isAuthenticated)
    {
        Console.WriteLine($"Chats page: Auth state changed to: {isAuthenticated}");
        if (!isAuthenticated)
        {
            Navigation.NavigateTo("/login", forceLoad: true);
        }
        else if (!isInitialized)
        {
            // Auth became available, try to load data
            InvokeAsync(async () =>
            {
                isInitialized = true;
                StateHasChanged();
                await LoadCoaches();
                await LoadChats();
            });
        }
        InvokeAsync(StateHasChanged);
    }

    private async Task LoadChats()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            if (IsSearchActive())
            {
                chatResult = await ChatService.SearchChatsAsync(
                    searchModel.MessageContent,
                    searchModel.MessageType,
                    searchModel.SentBy,
                    searchModel.IsRead,
                    currentPage,
                    pageSize);
            }
            else
            {
                chatResult = await ChatService.GetChatsWithPagingAsync(currentPage, pageSize);
            }

            Console.WriteLine($"Chats page: Loaded {chatResult.Items.Count} chats");
        }
        catch (UnauthorizedAccessException)
        {
            Console.WriteLine("Chats page: Unauthorized during LoadChats, redirecting to login");
            Navigation.NavigateTo("/login", forceLoad: true);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Chats page: Error loading chats: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", $"Error loading chats: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadCoaches()
    {
        try
        {
            var coachResult = await CoachService.GetCoachesWithPagingAsync(1, 100);
            coaches = coachResult.Items;
            Console.WriteLine($"Chats page: Loaded {coaches.Count} coaches");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Chats page: Error loading coaches: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", $"Error loading coaches: {ex.Message}");
        }
    }

    private async Task SearchChats()
    {
        currentPage = 1;
        await LoadChats();
    }

    private async Task ClearSearch()
    {
        searchModel = new SearchModel();
        currentPage = 1;
        await LoadChats();
    }

    private bool IsSearchActive()
    {
        return !string.IsNullOrEmpty(searchModel.MessageContent) ||
               !string.IsNullOrEmpty(searchModel.MessageType) ||
               !string.IsNullOrEmpty(searchModel.SentBy) ||
               searchModel.IsRead.HasValue;
    }

    private async Task ChangePage(int page)
    {
        currentPage = page;
        await LoadChats();
    }

    private void OpenCreateModal()
    {
        chatModel = new ChatFormModel
        {
            UserId = AuthService.CurrentUser?.UserAccountId ?? 1,
            SentBy = "User",
            MessageType = "Text"
        };
        isEditing = false;
        modalError = string.Empty;
        showModal = true;
    }

    private void OpenEditModal(ChatsLocDpx chat)
    {
        chatModel = new ChatFormModel
        {
            ChatsLocDpxid = chat.ChatsLocDpxid,
            UserId = chat.UserId,
            CoachId = chat.CoachId,
            Message = chat.Message,
            SentBy = chat.SentBy,
            MessageType = chat.MessageType,
            IsRead = chat.IsRead,
            AttachmentUrl = chat.AttachmentUrl
        };
        isEditing = true;
        modalError = string.Empty;
        showModal = true;
    }

    private void CloseModal()
    {
        showModal = false;
        chatModel = new();
        modalError = string.Empty;
    }

    private async Task SaveChat()
    {
        try
        {
            isSaving = true;
            modalError = string.Empty;

            if (isEditing)
            {
                var updateInput = new ChatsLocDpxUpdateInput
                {
                    ChatsLocDpxid = chatModel.ChatsLocDpxid,
                    Message = chatModel.Message,
                    SentBy = chatModel.SentBy,
                    MessageType = chatModel.MessageType,
                    IsRead = chatModel.IsRead,
                    AttachmentUrl = chatModel.AttachmentUrl,
                    ResponseTime = DateTime.UtcNow
                };

                await ChatService.UpdateChatAsync(updateInput);
            }
            else
            {
                var createInput = new ChatsLocDpxInput
                {
                    UserId = chatModel.UserId,
                    CoachId = chatModel.CoachId,
                    Message = chatModel.Message,
                    SentBy = chatModel.SentBy,
                    MessageType = chatModel.MessageType,
                    IsRead = chatModel.IsRead,
                    AttachmentUrl = chatModel.AttachmentUrl,
                    ResponseTime = DateTime.UtcNow
                };

                await ChatService.CreateChatAsync(createInput);
            }

            CloseModal();
            await LoadChats();
        }
        catch (Exception ex)
        {
            modalError = $"Error saving chat: {ex.Message}";
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }

    private async Task DeleteChat(int id)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this chat?"))
        {
            try
            {
                await ChatService.DeleteChatAsync(id);
                await LoadChats();
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Error deleting chat: {ex.Message}");
            }
        }
    }

    // Correct IDisposable implementation for Blazor components
    public void Dispose()
    {
        AuthService.AuthStateChanged -= OnAuthStateChanged;
    }

    public class SearchModel
    {
        public string? MessageContent { get; set; }
        public string? MessageType { get; set; }
        public string? SentBy { get; set; }
        public string? IsReadString { get; set; }
        public bool? IsRead => IsReadString switch
        {
            "true" => true,
            "false" => false,
            _ => null
        };
    }

    public class ChatFormModel
    {
        public int ChatsLocDpxid { get; set; }

        [Required]
        [Range(1, int.MaxValue, ErrorMessage = "User ID is required")]
        public int UserId { get; set; }

        [Required]
        [Range(1, int.MaxValue, ErrorMessage = "Please select a coach")]
        public int CoachId { get; set; }

        [Required(ErrorMessage = "Message is required")]
        public string Message { get; set; } = string.Empty;

        [Required(ErrorMessage = "Please select who sent this message")]
        public string SentBy { get; set; } = string.Empty;

        [Required(ErrorMessage = "Please select message type")]
        public string MessageType { get; set; } = string.Empty;

        public bool IsRead { get; set; }
        public string? AttachmentUrl { get; set; }
    }
}