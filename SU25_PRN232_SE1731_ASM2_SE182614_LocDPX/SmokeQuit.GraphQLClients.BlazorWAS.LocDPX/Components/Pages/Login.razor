@* Components/Pages/Login.razor *@
@page "/login"
@inject AuthService AuthService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>SmokeQuit - Login</PageTitle>

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6 col-lg-4">
            <div class="card shadow">
                <div class="card-header bg-primary text-white text-center">
                    <h4>SmokeQuit Login</h4>
                </div>
                <div class="card-body">
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger">
                            @errorMessage
                        </div>
                    }

                    <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
                        <DataAnnotationsValidator />

                        <div class="mb-3">
                            <label for="username" class="form-label">Username</label>
                            <InputText id="username" class="form-control" @bind-Value="loginModel.Username" placeholder="Enter your username" />
                            <ValidationMessage For="() => loginModel.Username" />
                        </div>

                        <div class="mb-3">
                            <label for="password" class="form-label">Password</label>
                            <InputText type="password" id="password" class="form-control" @bind-Value="loginModel.Password" placeholder="Enter your password" />
                            <ValidationMessage For="() => loginModel.Password" />
                        </div>

                        <div class="d-grid">
                            <button type="submit" class="btn btn-primary" disabled="@isLoading">
                                @if (isLoading)
                                {
                                    <span class="spinner-border spinner-border-sm me-2"></span>
                                    <span>Logging in...</span>
                                }
                                else
                                {
                                    <span>Login</span>
                                }
                            </button>
                        </div>
                    </EditForm>

                    <div class="mt-3 text-center">
                        <small class="text-muted">Demo Credentials: admin / admin</small>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private LoginModel loginModel = new();
    private string errorMessage = string.Empty;
    private bool isLoading = false;

    protected override void OnInitialized()
    {
        // Redirect if already authenticated
        if (AuthService.IsAuthenticated)
        {
            Navigation.NavigateTo("/chats");
        }
    }

    private async Task HandleLogin()
    {
        try
        {
            isLoading = true;
            errorMessage = string.Empty;

            // Call the real GraphQL login API
            var success = await AuthService.LoginAsync(loginModel.Username, loginModel.Password);

            if (success)
            {
                // Successful login - redirect to chats page
                Navigation.NavigateTo("/chats");
            }
            else
            {
                errorMessage = "Invalid username or password. Please check your credentials and try again.";
            }
        }
        catch (HttpRequestException httpEx)
        {
            errorMessage = "Unable to connect to the server. Please check if the API is running.";
            Console.WriteLine($"HTTP Error: {httpEx.Message}");
        }
        catch (Exception ex)
        {
            errorMessage = $"Login failed: {ex.Message}";
            Console.WriteLine($"Login Error: {ex}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Username is required")]
        public string Username { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; } = string.Empty;
    }
}