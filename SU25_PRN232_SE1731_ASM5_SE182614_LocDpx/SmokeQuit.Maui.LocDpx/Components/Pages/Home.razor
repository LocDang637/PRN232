@page "/"
@using System.Text
@using System.Text.Json
@using System.Net.NetworkInformation
@using System.Net

<EditForm Model="@chatMessage" OnSubmit="async () => await OcelotSubmit()">
    <div class="col-md-4">
        <div class="rounded p-3 h-100">
            <div class="mb-3">
                <label>User ID:</label>
                <InputNumber @bind-Value="chatMessage.UserId" class="form-control" />
            </div>
            <div class="mb-3">
                <label>Coach ID:</label>
                <InputNumber @bind-Value="chatMessage.CoachId" class="form-control" />
            </div>
            <div class="mb-3">
                <label>Message:</label>
                <InputText @bind-Value="chatMessage.Message" class="form-control" />
            </div>
            <div class="mb-3">
                <label>Sent By:</label>
                <InputText @bind-Value="chatMessage.SentBy" class="form-control" />
            </div>
            <div class="mb-3">
                <label>Message Type:</label>
                <InputText @bind-Value="chatMessage.MessageType" class="form-control" />
            </div>
            <button type="submit" class="btn btn-danger">Send Chat</button>
            <button type="button" class="btn btn-info" @onclick="TestConnectivity">Test Connectivity</button>
            <span class="text-danger">@Message</span>
            <div class="mt-2">
                <small class="text-info">Platform: @GetPlatform() | Current Test: @currentTestEndpoint</small>
            </div>
        </div>
    </div>
</EditForm>

<table class="table table-responsive table-striped table-bordered">
    <thead class="table-primary">
        <tr>
            <th>Chat ID</th>
            <th>Message</th>
            <th>Sent By</th>
            <th>Created At</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in ChatMessages)
        {
            <tr>
                <td>@item.ChatsLocDpxid</td>
                <td>@item.Message</td>
                <td>@item.SentBy</td>
                <td>@item.CreatedAt?.ToString("HH:mm:ss")</td>
            </tr>
        }
    </tbody>
</table>

@code {
    public ChatMessage chatMessage { get; set; } = new();
    public List<ChatMessage> ChatMessages { get; set; } = new();
    public string Message { get; set; } = "";
    public string currentTestEndpoint { get; set; } = "";

    protected override void OnInitialized()
    {
        // Initialize with sample data
        chatMessage.UserId = 1;
        chatMessage.CoachId = 1;
        chatMessage.Message = "Hello from mobile app";
        chatMessage.SentBy = "User";
        chatMessage.MessageType = "Text";
        chatMessage.IsRead = false;
        chatMessage.CreatedAt = DateTime.Now;
        chatMessage.ResponseTime = DateTime.Now;

        // Create coach object
        chatMessage.Coach = new CoachModel
        {
            CoachesLocDpxid = 1,
            FullName = "Dr. Smith",
            Email = "coach@example.com",
            PhoneNumber = "123-456-7890",
            Bio = "Smoking cessation expert",
            CreatedAt = DateTime.Now
        };
    }

    private string GetPlatform()
    {
#if ANDROID
        return "Android";
#elif WINDOWS
        return "Windows";
#else
        return "Other";
#endif
    }

    private List<string> GetOptimalEndpoints()
    {
        var endpoints = new List<string>();

#if ANDROID
        // Android emulator specific endpoints
        endpoints.Add("http://10.0.2.2:5048/gateway/ChatsLocDpx");

        // Try host machine IP for Android device
        endpoints.Add("http://192.168.1.163:5048/gateway/ChatsLocDpx");

        // Additional fallbacks
        endpoints.Add("http://10.87.59.29:5048/gateway/ChatsLocDpx");

#elif WINDOWS
        // Windows - localhost first
        endpoints.Add("http://localhost:5048/gateway/ChatsLocDpx");
        endpoints.Add("http://127.0.0.1:5048/gateway/ChatsLocDpx");

#else
        // Other platforms
        endpoints.Add("http://localhost:5048/gateway/ChatsLocDpx");
        endpoints.Add("http://10.0.2.2:5048/gateway/ChatsLocDpx");
        endpoints.Add("http://192.168.1.163:5048/gateway/ChatsLocDpx");
#endif

        return endpoints;
    }

    protected async Task TestConnectivity()
    {
        var handler = new HttpClientHandler();
        handler.ServerCertificateCustomValidationCallback = (message, cert, chain, errors) => true;

        using (var httpClient = new HttpClient(handler))
        {
            httpClient.Timeout = TimeSpan.FromSeconds(10);

            var endpoints = GetOptimalEndpoints();
            Message = $"🔍 Testing {endpoints.Count} endpoints...\n";

            foreach (var endpoint in endpoints)
            {
                currentTestEndpoint = endpoint;
                StateHasChanged();

                try
                {
                    Message += $"Testing: {endpoint}\n";
                    StateHasChanged();

                    // Test basic connectivity first
                    var testResponse = await httpClient.GetAsync(endpoint.Replace("/gateway/ChatsLocDpx", "/swagger"));
                    Message += $"  Swagger test: {testResponse.StatusCode}\n";

                    // Test actual endpoint
                    var pingResponse = await httpClient.GetAsync(endpoint);
                    Message += $"  Gateway test: {pingResponse.StatusCode}\n";

                    if (testResponse.IsSuccessStatusCode || pingResponse.StatusCode == System.Net.HttpStatusCode.MethodNotAllowed)
                    {
                        Message += $"  ✅ {endpoint} is REACHABLE\n\n";
                    }
                    else
                    {
                        Message += $"  ❌ {endpoint} returned {pingResponse.StatusCode}\n\n";
                    }
                }
                catch (TaskCanceledException)
                {
                    Message += $"  ⏱️ {endpoint} - TIMEOUT\n\n";
                }
                catch (HttpRequestException ex)
                {
                    Message += $"  🔌 {endpoint} - CONNECTION ERROR: {ex.Message}\n\n";
                }
                catch (Exception ex)
                {
                    Message += $"  ❗ {endpoint} - ERROR: {ex.GetType().Name}\n\n";
                }

                StateHasChanged();
                await Task.Delay(500);
            }

            currentTestEndpoint = "Test completed";
            StateHasChanged();
        }
    }

    protected async Task OcelotSubmit()
    {
        try
        {
            var handler = new HttpClientHandler();
            handler.ServerCertificateCustomValidationCallback = (message, cert, chain, errors) => true;

            using (var httpClient = new HttpClient(handler))
            {
                httpClient.Timeout = TimeSpan.FromSeconds(30);

                var serializeContent = System.Text.Json.JsonSerializer.Serialize(chatMessage);
                var endpoints = GetOptimalEndpoints();

                Message = $"Platform: {GetPlatform()}, trying {endpoints.Count} endpoints...\n";
                StateHasChanged();

                // Try each endpoint in order
                foreach (var endpoint in endpoints)
                {
                    currentTestEndpoint = endpoint;

                    try
                    {
                        Message = $"📤 Sending to: {endpoint}...";
                        StateHasChanged();
                        await Task.Delay(500);

                        var response = await httpClient.PostAsync(endpoint,
                            new StringContent(serializeContent, Encoding.UTF8, "application/json"));

                        var responseContent = await response.Content.ReadAsStringAsync();

                        if (response.IsSuccessStatusCode)
                        {
                            Message = $"✅ SUCCESS! Connected via {endpoint}";

                            // Add to display list
                            var newChat = new ChatMessage
                            {
                                ChatsLocDpxid = ChatMessages.Count + 1,
                                UserId = chatMessage.UserId,
                                CoachId = chatMessage.CoachId,
                                Message = chatMessage.Message,
                                SentBy = chatMessage.SentBy,
                                MessageType = chatMessage.MessageType,
                                CreatedAt = DateTime.Now
                            };
                            ChatMessages.Add(newChat);

                            StateHasChanged();
                            return; // Success - exit method
                        }
                        else
                        {
                            Message = $"❌ {endpoint} returned {response.StatusCode}: {responseContent}";
                            StateHasChanged();
                            await Task.Delay(1000);
                        }
                    }
                    catch (TaskCanceledException)
                    {
                        Message = $"⏱️ {endpoint} - Connection timeout";
                        StateHasChanged();
                        await Task.Delay(500);
                        continue;
                    }
                    catch (HttpRequestException ex)
                    {
                        Message = $"🔌 {endpoint} - Connection failed: {ex.Message}";
                        StateHasChanged();
                        await Task.Delay(500);
                        continue;
                    }
                    catch (Exception ex)
                    {
                        Message = $"❗ {endpoint} - Error: {ex.GetType().Name}: {ex.Message}";
                        StateHasChanged();
                        await Task.Delay(500);
                        continue;
                    }
                }

                // If all endpoints failed
                Message = $"❌ ALL ENDPOINTS FAILED";
            }
        }
        catch (Exception ex)
        {
            Message = $"CRITICAL ERROR: {ex.GetType().Name} - {ex.Message}";
        }
    }

    public class ChatMessage
    {
        public int ChatsLocDpxid { get; set; }
        public int UserId { get; set; }
        public int CoachId { get; set; }
        public string Message { get; set; } = "";
        public string SentBy { get; set; } = "";
        public string MessageType { get; set; } = "";
        public bool IsRead { get; set; }
        public string AttachmentUrl { get; set; } = "";
        public DateTime? ResponseTime { get; set; }
        public DateTime? CreatedAt { get; set; }
        public CoachModel Coach { get; set; } = new();
    }

    public class CoachModel
    {
        public int CoachesLocDpxid { get; set; }
        public string FullName { get; set; } = "";
        public string Email { get; set; } = "";
        public string PhoneNumber { get; set; } = "";
        public string Bio { get; set; } = "";
        public DateTime? CreatedAt { get; set; }
    }
}